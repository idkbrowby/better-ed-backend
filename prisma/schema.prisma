datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider               = "prisma-client-py"
  partial_type_generator = "prisma/prisma_partial_types.py"
  recursive_type_depth   = 5
}

model User {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String
  username   String   @unique @db.VarChar(20)
  password   String
  created_at DateTime @default(now()) @db.Timestamptz()

  classrooms  ClassroomUser[]
  submissions Submission[]

  @@index([username])
}

model Classroom {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now()) @db.Timestamptz()

  users       ClassroomUser[]
  assignments Assignment[]
}

model ClassroomUser {
  id           Int       @id @default(autoincrement())
  user_id      String    @db.Uuid
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  classroom_id Int
  classroom    Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)
  role         Role      @default(USER)
  created_at   DateTime  @default(now()) @db.Timestamptz()
}

enum Role {
  OWNER
  USER
}

model Assignment {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  deadline     DateTime  @db.Timestamptz()
  classroom_id Int
  classroom    Classroom @relation(fields: [classroom_id], references: [id], onDelete: Cascade)

  testcases   TestCase[]
  submissions Submission[]
}

model TestCase {
  id              Int        @id @default(autoincrement())
  assignment_id   Int
  assignment      Assignment @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  expected_output String
}

model Submission {
  id              Int        @id @default(autoincrement())
  created_by      String    @db.Uuid
  created_by_user User       @relation(fields: [created_by], references: [id], onDelete: Cascade)
  assignment_id   Int
  assignment      Assignment @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  code            String
  passed          Boolean    @default(false)
  n_tests_passed  Int
}
